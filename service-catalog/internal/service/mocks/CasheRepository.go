// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "v1/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// CasheRepository is an autogenerated mock type for the CasheRepository type
type CasheRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, key
func (_m *CasheRepository) Get(ctx context.Context, key string) (*entity.Product, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Product, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Product); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invalidate provides a mock function with given fields: ctx, key
func (_m *CasheRepository) Invalidate(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Invalidate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, v
func (_m *CasheRepository) Set(ctx context.Context, key string, v *entity.Product) error {
	ret := _m.Called(ctx, key, v)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *entity.Product) error); ok {
		r0 = rf(ctx, key, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCasheRepository creates a new instance of CasheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCasheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CasheRepository {
	mock := &CasheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
